for(s in 1:S){
posterior_theta_T = rgamma(1,
shape = posterior_alpha_T,
rate = posterior_beta_T)
Ts = rexp(n = 1000, rate = posterior_theta_T)
k = max(which(cumsum(Ts) <= 60), 0)
results[s] = k
}
hist(results, main = "Number of buses arrived within an hour")
mean(results)
mean(results == 0)
# (d)
S = 10^4
set.seed(77)
posterior_alpha_N = sum_N + alpha_N
posterior_beta_N = n + beta_N
results <- numeric(S)
for(s in 1:S){
posterior_theta_T = rgamma(1,
shape = posterior_alpha_T,
rate = posterior_beta_T)
posterior_theta_N = rgamma(1,
shape = posterior_alpha_N,
rate = posterior_beta_N)
Ts = rexp(n = 1000, rate = posterior_theta_T)
k = max(which(cumsum(Ts) <= 60), 0)
if(k == 0){
# No buses, so no people:
results[s] = 0
} else {
# Simulate people on each of the k buses
N_i = rpois(n = k,
lambda = posterior_theta_N)
# Sum for total # people within one hour:
results[s] = sum(N_i)
}
}
hist(results, breaks = 50, main = "Total number of people arrived within an hour")
mean(results)
mean(results >= 200)
abline(v = 200, lwd = 3)
0.5/(sqrt(1/12))
1/19.6
0.05102041^2
1/0.002603082
384.16/3
0.5/(sqrt(25/(3 * 135)))
25/(3 * 250)
sqrt(25/(3 * 250))
sqrt(25/(3 * 250)) * 2.58
h1 = (10/17) * log2(10/17)
h2 = (7/17) * log2(7/17)
-h1 - h2
h1 = (8/17) * log2(8/17)
h2 = (9/17) * log2(9/17)
-h1 - h2
0.512 + 0.486
h1 = (4/8) * log2(4/8)
h2 = (4/8) * log2(4/8)
-h1 - h2
h1 = (3/8) * log2(3/8)
h2 = (5/8) * log2(5/8)
-h1 - h2
h1 = (5/9) * log2(5/9)
h2 = (4/9) * log2(4/9)
-h1 - h2
(9/17) * 0.991 + (8/17) * 0.954
h1 = (3/7) * log2(3/7)
h2 = (4/7) * log2(4/7)
-h1 - h2
h1 = (5/10) * log2(5/10)
h1 = (5/10) * log2(5/10)
h2 = (5/10) * log2(5/10)
-h1 - h2
(7/17) * 0.985 + (10/17)
e
exp
exp(0)
exp(1)
0.1 + 0.15 * exp(1) + 0.05 * exp(3) + 0.4 + 0.1 * exp(1) + 0.1 * exp(2) + 0.4 * exp(3) + 0.15 + 0.3 * exp(2) + 0.14 * exp(3)
0.1 + 0.15 * exp(1) + 0.05 * exp(3) + 0.4 + 0.1 * exp(1) + 0.1 * exp(2) + 0.4 * exp(3) + 0.15 + 0.3 * exp(2) + 0.15 * exp(3)
0.9^9
0.9^9 * 0.1
r = 3
p = 0.1
r * (1-p)/p
r/p
r * (1-p)/(p^2)
0.5 * 0.9 * (95/99)
0.45 * 0.95
0.41/0.45
90/95
90/99
exp(-0.5)
0.9^5 * 5
0.9^5
90 * 89 * 88 * 87 * 86 / (100 * 99 * 98 * 97 * 96)
X = runif(10000, min = 0, max = 1)
?log
?ln
Y = log(1 + X)
hist(Y)
log(2)
?dexp
dexp(rate = 1)
dexp(1)
?sep
?seq
x = (0, log(2), by = 0.001)
x = seq(0, log(2), by = 0.001)
dexp(x = x, rate = 1)
plot(dexp(x = x, rate = 1))
hist(y)
y = dexp(x = x, rate = 1)
hist(y)
hist(Y)
X = runif(10000, min = 0, max = 1)
Y = log(1 + X)
hist(Y)
plot(Y)
hist(Y, freq = FALSE)
hist(Y, freq = TRUE)
?rexp
y = rexp(10000, rate = 1)
hist(y)
hist(y, xlim = c(0, log(2)))
hist(y, xlim = c(0, log(2)), breaks = 100)
hist(Y)
hist(y, xlim = c(0, log(2)), breaks = 100)
2 * log(2) - 1
log(2) ^2 * 2 - 4 * log(2) + 2
sqrt(0.188) * 1.96 /100
sqrt(0.188) * 1.96 / 0.00001
sqrt(84983.57)
84984^2
sqrt(0.188) * 1.96 / sqrt(1502000)
sqrt(0.188) * 1.96 / sqrt(1502000000)
var = 0.188 - (0.386) ^ 2
var
sigma = sqrt(var)
sigma
1.96 * sigma / 100
(1.96 * sigma / 0.00001) ^2
20/21
lambda - 0.75
lambda - 0.75
lambda = 0.75
exp(-3*lambda) * (1 + 3*lambda) + exp(-3*lambda) * (9/4) * (lambda ^ 2)
exp(-3*lambda) * (1 + 3*lambda) + exp(-3*lambda) * (9/2) * (lambda ^ 2)
1/2.25
1- (0,195 + 0.147 + 0.073 + 0.0183)
1- (0.195 + 0.147 + 0.073 + 0.0183)
1- (0.147 + 0.073 + 0.0183)
setwd("D:/NBA-Stats-Inflation/src")
# Load packages for data extraction:
library(tidyverse)
library(dplyr)
library(readr)
test = read_csv("data/player_stats.csv")
View(test)
# A function to get the top n scorers in each season:
get_top_n_scorers = function(df, n_players) {
top_scorers = df %>%
group_by(Season) %>%
slice_max(order_by = PTS, n = n) %>%
arrange(desc(PTS))
return(top_scorers)
}
test_1 = get_top_n_scorers(test, n_players = 10)
# A function to get the top n scorers in each season:
get_top_n_scorers = function(df, n_players) {
top_scorers = df %>%
group_by(Season) %>%
arrange(desc(PTS)) %>%
slice_head(n)
return(top_scorers)
}
test_1 = get_top_n_scorers(test, n_players = 10)
# A function to get the top n scorers in each season:
get_top_n_scorers = function(df, n_players) {
top_scorers = df %>%
group_by(Season) %>%
arrange(desc(PTS)) %>%
slice_head(n = n_players)
return(top_scorers)
}
test_1 = get_top_n_scorers(test, n_players = 10)
get_top_n_scorers = function(df, n_players) {
top_scorers = df %>%
group_by(Season) %>%
slice_max(order_by = PTS, n = n_players) %>%
arrange(desc(PTS))
return(top_scorers)
}
test_2 = get_top_n_scorers(test, n_players = 10)
View(test_2)
View(test_1)
test = test_1
View(test)
# A function to get the top n scorers in each season:
get_top_n_scorers = function(df, n_players) {
top_scorers = df %>%
group_by(Season) %>%
slice_max(order_by = PTS * G, n = n_players) %>%
arrange(desc(PTS))
return(top_scorers)
}
test = get_top_n_scorers(test, n_players = 10)
# A function to get the top n scorers in each season:
get_top_n_scorers = function(df, n_players) {
top_scorers = df %>%
group_by(Season) %>%
mutate(Total_Points = PTS * G) %>%
slice_max(order_by = Total_Points, n = n_players) %>%
arrange(desc(Total_Points))
return(top_scorers)
}
test = get_top_n_scorers(test, n_players = 10)
# A function to get the top n scorers in each season:
get_top_n_scorers = function(df, n_players) {
top_scorers = df %>%
group_by(Season) %>%
mutate(Total_Points = as.integer(PTS * G)) %>%
slice_max(order_by = Total_Points, n = n_players) %>%
arrange(desc(Total_Points))
return(top_scorers)
}
test = get_top_n_scorers(test, n_players = 10)
View(test)
# A function to get the top n scorers in each season:
get_top_n_scorers = function(df, n_players) {
top_scorers = df %>%
group_by(Season) %>%
mutate(Total_Points = as.integer(PTS * G)) %>%
slice_max(order_by = Total_Points, n = n_players) %>%
arrange(desc(Season), desc(Total_Points))
return(top_scorers)
}
test = get_top_n_scorers(test, n_players = 10)
View(test)
# A function to get the top n scorers in each season:
get_top_n_scorers = function(df, n_players) {
top_scorers = df %>%
group_by(Season) %>%
mutate(Total_Points = as.integer(PTS * G)) %>%
slice_max(order_by = Total_Points, n = n_players) %>%
arrange(Season, desc(Total_Points))
return(top_scorers)
}
test = get_top_n_scorers(test, n_players = 10)
View(test)
# A function to get the sum of total points by the top n scorers in each season:
get_top_scorers_sum = function(df) {
top_scorers_sum = df %>%
group_by(Season) %>%
summarise(Total_Points = sum(Total_Points))
top_scorers_sum$Season <- as.Date(top_scorers_sum$Season)
return(top_scorers_sum)
}
test_1 = get_top_scorers_sum(test)
?as.Date
year <- 2022
# Convert year to date format
season_date <- as.Date(paste0(year, "-01-01"))
print(season_date)
# A function to get the sum of total points by the top n scorers in each season:
get_top_scorers_sum = function(df) {
top_scorers_sum = df %>%
group_by(Season) %>%
summarise(Total_Points = sum(Total_Points))
return(top_scorers_sum)
}
test_1 = get_top_scorers_sum(test)
View(test_1)
# A function to get the top n scorers in each season:
get_top_n_scorers = function(df, n_players) {
top_scorers = df %>%
group_by(Season) %>%
mutate(Total_PTS = as.integer(PTS * G)) %>%
slice_max(order_by = Total_PTS, n = n_players) %>%
arrange(Season, desc(Total_PTS))
return(top_scorers)
}
# A function to get the sum of total points by the top n scorers in each season:
get_top_scorers_sum = function(df) {
top_scorers_sum = df %>%
group_by(Season) %>%
summarise(Total_PTS = sum(Total_PTS))
return(top_scorers_sum)
}
# A function that constructs the Poisson-Gamma model.
# Inputs: data, which should be any target column from the cleaned dataset
run_poisson_model = function(data, S = 10^4, nburn = 1000, alpha, beta) {
# Initialize the sampler:
n = length(data)
k = ceiling(n/2)
lambda_1 = mean(data[1:k])
lambda_2 = mean(data[(k+1):n])
# Initialize placeholders for results:
post_lambda_1 = array(0, c(S, 1))
post_lambda_2 = array(0, c(S, 1))
post_k = array(0, c(S, 1))
for(s in 1:(nburn + S)){
# Sample lambda_1:
lambda_1 = rgamma(n = 1,
shape = alpha + sum(data[1:k]),
rate = beta + k)
# Sample lambda_2:
lambda_2 = rgamma(n = 1,
shape = alpha + sum(data[(k+1):n]),
rate = beta + (n-k))
# Sample k:
log_g = sapply(1:(n-1),
function(j)
{sum(dpois(data[1:j], lambda = lambda_1, log = TRUE)) +
sum(dpois(data[(j+1):n], lambda = lambda_2, log = TRUE))})
k = sample(1:(n-1), 1, prob = exp(log_g))
# Save the simulations:
if(s > nburn){
post_lambda_1[s - nburn] = lambda_1
post_lambda_2[s - nburn] = lambda_2
post_k[s - nburn] = k
}
}
return(post_lambda_1, post_lambda_2, post_k)
}
run_poisson_model(test_1$Total_Points, alpha = 0.5, beta = 0.5)
data = test_1$Total_Points
# Initialize the sampler:
n = length(data)
n
k = ceiling(n/2)
lambda_1 = mean(data[1:k])
View(test_1)
lambda_2 = mean(data[(k+1):n])
# Initialize placeholders for results:
post_lambda_1 = array(0, c(S, 1))
post_lambda_2 = array(0, c(S, 1))
post_k = array(0, c(S, 1))
S = 10^4
nburn = 1000
alpha = 0.5
beta = 0.01
# Initialize placeholders for results:
post_lambda_1 = array(0, c(S, 1))
post_lambda_2 = array(0, c(S, 1))
post_k = array(0, c(S, 1))
for(s in 1:(nburn + S)){
# Sample lambda_1:
lambda_1 = rgamma(n = 1,
shape = alpha + sum(data[1:k]),
rate = beta + k)
# Sample lambda_2:
lambda_2 = rgamma(n = 1,
shape = alpha + sum(data[(k+1):n]),
rate = beta + (n-k))
# Sample k:
log_g = sapply(1:(n-1),
function(j)
{sum(dpois(data[1:j], lambda = lambda_1, log = TRUE)) +
sum(dpois(data[(j+1):n], lambda = lambda_2, log = TRUE))})
k = sample(1:(n-1), 1, prob = exp(log_g))
# Save the simulations:
if(s > nburn){
post_lambda_1[s - nburn] = lambda_1
post_lambda_2[s - nburn] = lambda_2
post_k[s - nburn] = k
}
}
# Sample lambda_1:
lambda_1 = rgamma(n = 1,
shape = alpha + sum(data[1:k]),
rate = beta + k)
# Sample lambda_2:
lambda_2 = rgamma(n = 1,
shape = alpha + sum(data[(k+1):n]),
rate = beta + (n-k))
# Sample k:
log_g = sapply(1:(n-1),
function(j)
{sum(dpois(data[1:j], lambda = lambda_1, log = TRUE)) +
sum(dpois(data[(j+1):n], lambda = lambda_2, log = TRUE))})
log_g
k = sample(1:(n-1), 1, prob = exp(log_g))
probs <- exp(log_g - max(log_g))
probs <- probs / sum(probs)
k = sample(1:(n-1), 1, prob = probs)
# Save the simulations:
if(s > nburn){
post_lambda_1[s - nburn] = lambda_1
post_lambda_2[s - nburn] = lambda_2
post_k[s - nburn] = k
}
post_k
hist(post_k)
plot(test_1)
knitr::opts_chunk$set(echo = TRUE)
setwd("D:/NBA-Stats-Inflation/src")
source("main/data_extraction.R")
source("main/gibbs_sampler.R")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "D:/NBA-Stats-Inflation/src")
source("main/data_extraction.R")
source("main/gibbs_sampler.R")
player_data = read_csv("data/player_stats.csv")
player_data = read_csv("data/player_stats.csv")
player_data = read_csv("data/player_stats.csv")
top_10_scorers = get_top_n_scorers(player_data, 10)
top_10_scorers_sum = get_top_scorers_sum(top_10_scorers)
head(top_10_scorers_sum)
View(top_10_scorers_sum)
player_data = read_csv("data/player_stats.csv")
top_10_scorers = get_top_n_scorers(player_data, 10)
top_10_sum = get_top_scorers_sum(top_10_scorers)
head(top_10_sum)
top_10_sum$Total_PTS[top_10_sum$Season == 1999]
top_10_sum$Total_PTS[top_10_sum$Season == 1999] = top_10_sum$Total_PTS[top_10_sum$Season == 1999] * (82/50)
top_10_sum$Total_PTS[top_10_sum$Season == 2012] = top_10_sum$Total_PTS[top_10_sum$Season == 1999] * (82/66)
top_10_sum$Total_PTS[top_10_sum$Season == 2020] = top_10_sum$Total_PTS[top_10_sum$Season == 1999] * (82/71)
top_10_sum$Total_PTS[top_10_sum$Season == 2021] = top_10_sum$Total_PTS[top_10_sum$Season == 1999] * (82/72)
top_10_sum$Total_PTS[top_10_sum$Season == 2024] = top_10_sum$Total_PTS[top_10_sum$Season == 1999] * (82/55)
View(top_10_sum)
player_data = read_csv("data/player_stats.csv")
top_10_scorers = get_top_n_scorers(player_data, 10)
top_10_sum = get_top_scorers_sum(top_10_scorers)
head(top_10_sum)
top_10_sum$Total_PTS[top_10_sum$Season == 1999] = as.integer(top_10_sum$Total_PTS[top_10_sum$Season == 1999] * (82/50))
top_10_sum$Total_PTS[top_10_sum$Season == 2012] = as.integer(top_10_sum$Total_PTS[top_10_sum$Season == 1999] * (82/66))
top_10_sum$Total_PTS[top_10_sum$Season == 2020] = as.integer(top_10_sum$Total_PTS[top_10_sum$Season == 1999] * (82/71))
top_10_sum$Total_PTS[top_10_sum$Season == 2021] = as.integer(top_10_sum$Total_PTS[top_10_sum$Season == 1999] * (82/72))
top_10_sum$Total_PTS[top_10_sum$Season == 2024] = as.integer(top_10_sum$Total_PTS[top_10_sum$Season == 1999] * (82/55))
View(top_10_sum)
plot(top_10_sum)
View(top_10_scorers)
run_poisson_model(top_10_sum$Total_PTS, alpha = 0.01, beta = 0.01)
year = (1851:1962)
y = c(4, 5, 4, 1, 0, 4, 3, 4, 0, 6, 3, 3, 4, 0, 2, 6, 3, 3, 5, 4, 5, 3,
1, 4, 4, 1, 5, 5, 3, 4, 2, 5, 2, 2, 3, 4, 2, 1, 3, 2, 2, 1, 1,
1, 1, 3, 0, 0, 1, 0, 1, 1, 0, 0, 3, 1, 0, 3, 2, 2, 0, 1, 1, 1,
0, 1, 0, 1, 0, 0, 0, 2, 1, 0, 0, 0, 1, 1, 0, 2, 3, 3, 1, 1, 2,
1, 1, 1, 1, 2, 4, 2, 0, 0, 0, 1, 4, 0, 0, 0, 1, 0, 0, 0, 0, 0,
1, 0, 0, 1, 0, 1)
plot(year, y, main = 'British Coal Mining Disasters');
n = length(y)
# Hyperparameters:
alpha = 0.5; beta = 0.01
# Pick some initial values:
k = ceiling(n/2) # midpoint is CP
lambda_1 = mean(y[1:k])
lambda_2 = mean(y[(k+1):n])
# Number of simulations to save:
S = 10^4
# Number of simulations to discard
nburn = 1000
# Storage:
post_lambda_1 = array(0, c(S, 1))
post_lambda_2 = array(0, c(S, 1))
post_k = array(0, c(S, 1));
top_10_sum$Total_PTS = as.integer(top_10_sum$Total_PTS / 100)
plot(top_10_sum)
run_poisson_model(top_10_sum$Total_PTS, alpha = 0.01, beta = 0.01)
source("main/gibbs_sampler.R")
run_poisson_model(top_10_sum$Total_PTS, alpha = 0.01, beta = 0.01)
post_lambda_1, post_lambda_2, post_k = run_poisson_model(top_10_sum$Total_PTS, alpha = 0.01, beta = 0.01)
result = run_poisson_model(top_10_sum$Total_PTS, alpha = 0.01, beta = 0.01)
posterior_changepoint = result[3]
hist(posterior_changepoint + 1976)
result = run_poisson_model(top_10_sum$Total_PTS, alpha = 0.5, beta = 0.01)
posterior_changepoint = result[3]
hist(posterior_changepoint)
posterior_changepoint
posterior_changepoint = result[[3]]
hist(posterior_changepoint + 1976)
top_10_sum$Total_PTS[-1]
top_10_sum$Total_PTS[:-1]
length(top_10_sum$Total_PTS)
top_10_sum$Total_PTS[:-48]
top_10_sum$Total_PTS[-48]
result = run_poisson_model(top_10_sum$Total_PTS[-48], alpha = 0.5, beta = 0.01)
posterior_changepoint = result[[3]]
hist(posterior_changepoint + 1976)
result = run_poisson_model(top_10_sum$Total_PTS, alpha = 0.5, beta = 0.01)
posterior_changepoint = result[[3]]
hist(posterior_changepoint + 1976)
hist(posterior_changepoint + 1976, break = 50)
hist(posterior_changepoint + 1976, breaks = 50)
hist(posterior_changepoint + 1976, breaks = 100)
hist(posterior_changepoint)
hist(posterior_changepoint + 1976)
hist(posterior_changepoint + 1976, breaks = 50)
result = run_poisson_model(top_10_sum$Total_PTS[-48], alpha = 0.5, beta = 0.01)
posterior_changepoint = result[[3]]
hist(posterior_changepoint + 1976, breaks = 50)
result = run_poisson_model(top_10_sum$Total_PTS, alpha = 0.5, beta = 0.01)
posterior_changepoint = result[[3]]
hist(posterior_changepoint + 1976, breaks = 50)
library(coda)
(ci = HPDinterval(as.mcmc(post_k + 1850)))
abline(v = ci, lwd=5, col='blue')
result = run_poisson_model(top_10_sum$Total_PTS, alpha = 0.5, beta = 0.01)
posterior_changepoint = result[[3]]
hist(posterior_changepoint + 1977, breaks = 50)
hist(posterior_changepoint + 1977, breaks = 50)
result = run_poisson_model(top_10_sum$Total_PTS[-48], alpha = 0.5, beta = 0.01)
posterior_changepoint = result[[3]]
hist(posterior_changepoint + 1977, breaks = 50)
ci = HPDinterval(as.mcmc(posterior_changepoint + 1977))
abline(v = ci, lwd = 5, col = 'blue')
mean(posterior_changepoint)
plot(top_10_sum$Season[-48], top_10_sum$Total_PTS[-48], main = 'Sum of Total Points of Top 10 Scorers');
abline(v = ci, lwd = 5, col = 'blue')
abline(v = mean(posterior_changepoint) + 1977, lwd = 5, col = 'red')
